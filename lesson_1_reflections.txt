How did viewing a diff between two versions of a file help you see the bug that
was introduced?
- lines with changes were pointed out
- easy to compare lines with changes
- faster identification of the error
Learned: - use git diff to compare to versions and see changes

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
- Being able to restore any version of a file
- compare files and quickly spot changes
- Find bugs easily and fast
Learned: - use git log to view all commited changes


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
Pros:	- Commits are only done after reasonable change
	- Each version stays executable
	- Less saved versions -> easier to see compare changes
Cons: 	- Changes can be lost when user doesn't save
	- Changes between to versions can be too big

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
- VCS for programming deal with interconnected files -> reasonable to save multiple files
- Docs files are usually unrelated -> saving seperately is appropriate

How can you use the commands git log and git diff to view the history of files?
git log:	- see when files have been commited
		- check messages for changes
git diff: 	- detailed comparison between two files
		- shows added and deleted files

How might using version control make you more confident to make changes that
could break something?
- It's possible to restore a former version at any time so there is no fear to loose a working version
- if bugs are introduced it is easier to find them
Learned: use git checkout to restore a former commited version

Now that you have your workspace set up, what do you want to try using Git for?
- Create an app for an electric bicycle and save the progress with Git

