What happens when you initialize a repository? Why do you need to do it?
- git starts to track the history of added files
- allows user to track changes



How is the staging area different from the working directory and the repository?
What value do you think it offers?
- intermediate stage to store changes that still have to be commited
- not all files in working directory have to be tracked
- comits can be done after significant changes



How can you use the staging area to make sure you have one commit per logical
change?
- add changed files to the staging area and compare them to repository
- add only one file at a time and commit before adding another


What are some situations when branches would be helpful in keeping your history
organized? 
How would branches help?
- when experimental versions are tested out
- when different versions of the game have to be safed (e.g. different modes)
- brances make it easy to work on several versions of a program


How do the diagrams help you visualize the branch structure?
- Check reachability of commits
- See commit history of branches
- see all branches


What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?
- changes of both branches get merged into one
- new branch has both branches as parent
- one branch label can be deleted


What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
pros: 	- fast progress
		- no need to review entire code

cons: 	- errors could be introduced
